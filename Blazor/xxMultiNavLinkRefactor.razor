<a class="@ComputedClass" @onclick="HandleClick" href="">
    @ChildContent
</a>

@code {

    [Inject]
    public NavigationManager? NavManager { get; set; }

    public IEnumerable<string> HrefOpts { get; set; } = Enumerable.Empty<string>();

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public string ActiveClass { get; set; } = string.Empty;

    [Parameter]
    public NavLinkMatch? Match { get; set; }

    public NavLinkMatch ComputedMatch
    {
        get =>
        Match ?? (HrefOpts.Count() == 1 ? NavLinkMatch.Prefix : NavLinkMatch.All);
    }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public string ComputedClass { get; set; } = string.Empty;


    public void HandleClick()
    {
        NavManager?.NavigateTo(HrefOpts.First());
    }


    private string GetClass(bool isActive) {
        return isActive ? $"{Class} {ActiveClass}" : Class;
    }

    private bool IsMatch(IEnumerable<string> hrefs, string path)
    {
        path = path.EndsWith("/") ? path.Substring(0, path.Length - 1) : path;
        return hrefs.Any(href => ComputedMatch == NavLinkMatch.All
        ? path == href : path.StartsWith(href));
    }


    private void SetClass(IEnumerable<string> hrefs, string currentUrl) {
       string path = NavManager!.ToBaseRelativePath(currentUrl);
       bool match = IsMatch(hrefs, path);
       ComputedClass =  GetClass(match);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ComputedClass = Class;
        HrefOpts = HrefOpts.Select(h => h.StartsWith("/") ? h.Substring(1) : h);
        NavManager!.LocationChanged += (sender, arg) => SetClass(HrefOpts, arg.Location);
    }

    protected override void OnParametersSet()
    {
        SetClass(HrefOpts, NavManager!.Uri);
    }
}
